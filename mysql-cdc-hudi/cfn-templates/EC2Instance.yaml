AWSTemplateFormatVersion: "2010-09-09"
Description: "Supplemental stack for Redshift Immersion Day labs 11, 12, and 18"
Parameters:
  RedshiftSubnetA:
    Description: First Redshift Subnet
    Type: AWS::EC2::Subnet::Id
  RedshiftSubnetB:
    Description: Second Redshift Subnet
    Type: AWS::EC2::Subnet::Id
  RedshiftSecurityGroup:
    Description: Redshift Security Group ID
    Type: AWS::EC2::SecurityGroup::Id
  InboundTraffic:
    Description: The IP address CIDR range (x.x.x.x/x) to connect from your local machine.  FYI, get your address using http://www.whatismyip.com.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
Mappings:
  RegionMap:
    us-west-2: # Oregon
      "EC2AMI" : "ami-03d1fabac69d3be74"
    us-east-1: # Virginia
      "EC2AMI" : "ami-0ef97a8d5328f468e"
Resources:
  LambdaRoleToInitDMS:
    Type: AWS::IAM::Role
    Properties :
      AssumeRolePolicyDocument:
        Version : 2012-10-17
        Statement :
          -
            Effect : Allow
            Principal :
              Service :
                - lambda.amazonaws.com
            Action :
              - sts:AssumeRole
      Path : /
      Policies:
        -
          PolicyName: LambdaCloudFormationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub "arn:aws:s3:::cloudformation-custom-resource-response-${AWS::Region}"
                  - !Sub "arn:aws:s3:::cloudformation-waitcondition-${AWS::Region}"
                  - !Sub "arn:aws:s3:::cloudformation-custom-resource-response-${AWS::Region}/*"
                  - !Sub "arn:aws:s3:::cloudformation-waitcondition-${AWS::Region}/*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AmazonRedshiftFullAccess
  LambdaFunctionDMSRoles:
    Type: "AWS::Lambda::Function"
    Properties:
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import logging
          import time
          client = boto3.client('iam')
          logging.basicConfig()
          logger = logging.getLogger(__name__)
          logger.setLevel(logging.INFO)

          def handler(event, context):
            logger.info(json.dumps(event))

            if event['RequestType'] == 'Delete':
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Data': 'Delete complete'})
            else:
              try:
                response = client.get_role(RoleName='dms-access-for-endpoint')
              except:
                try:
                  role_policy_document = {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": [
                              "dms.amazonaws.com",
                              "redshift.amazonaws.com"
                            ]
                          },
                          "Action": "sts:AssumeRole"
                        }
                      ]
                  }
                  client.create_role(
                      RoleName='dms-access-for-endpoint',
                      AssumeRolePolicyDocument=json.dumps(role_policy_document)
                  )
                  client.attach_role_policy(
                    RoleName='dms-access-for-endpoint',
                    PolicyArn='arn:aws:iam::aws:policy/service-role/AmazonDMSRedshiftS3Role'
                  )
                except Exception as e:
                  logger.error(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Data': 'Create failed'})
              try:
                response = client.get_role(RoleName='dms-cloudwatch-logs-role')
              except:
                try:
                  role_policy_document = {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": [
                              "dms.amazonaws.com"
                            ]
                          },
                          "Action": "sts:AssumeRole"
                        }
                      ]
                  }
                  client.create_role(
                      RoleName='dms-cloudwatch-logs-role',
                      AssumeRolePolicyDocument=json.dumps(role_policy_document)
                  )
                  client.attach_role_policy(
                    RoleName='dms-cloudwatch-logs-role',
                    PolicyArn='arn:aws:iam::aws:policy/service-role/AmazonDMSCloudWatchLogsRole'
                  )
                except Exception as e:
                  logger.error(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Data': 'Create failed'})
              try:
                response = client.get_role(RoleName='dms-vpc-role')
              except:
                try:
                  role_policy_document = {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": [
                              "dms.amazonaws.com"
                            ]
                          },
                          "Action": "sts:AssumeRole"
                        }
                      ]
                  }
                  client.create_role(
                      RoleName='dms-vpc-role',
                      AssumeRolePolicyDocument=json.dumps(role_policy_document)
                  )
                  client.attach_role_policy(
                    RoleName='dms-vpc-role',
                    PolicyArn='arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole'
                  )
                  time.sleep(30)
                except Exception as e:
                  logger.error(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Data': 'Create failed'})

              cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Data': 'Create complete'})
      Handler: index.handler
      Role:
        Fn::GetAtt: [LambdaRoleToInitDMS, Arn]
      Runtime: python3.7
  InitDMSRoles:
     Type: Custom::InitDMSRoles
     DependsOn:
       - LambdaFunctionDMSRoles
     Properties:
       ServiceToken: !GetAtt 'LambdaFunctionDMSRoles.Arn'
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: 'm5a.xlarge'
      SecurityGroupIds: [!Ref 'RedshiftSecurityGroup']
      SubnetId:
        Ref: RedshiftSubnetA
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: 'true'
            Iops: '2000'
            VolumeSize: '250'
            VolumeType: io1
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - EC2AMI
      UserData:
          Fn::Base64:
            !Sub |
              <powershell>
               new-item 'c:\users\developer\initialize.log'
              $log = 'c:\users\developer\initialize.log'
              $now = Get-Date
              try {
                  Add-Content $log -value "[$now] - setting developer password and granting remote login"
                  net.exe user developer Password1
                  net.exe LOCALGROUP "Remote Desktop Users" developer /ADD
                  Add-Content $log -value "[$now] - successfully set password to Password1"
              } catch {
                  Add-Content $log -value "[$now] - error changing password $_"
              }
              </powershell>
  InstanceSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: !Ref InboundTraffic
      Description: RDP access to EC2 instance
      FromPort: 3389
      ToPort: 3389
      GroupId: !Ref RedshiftSecurityGroup
      IpProtocol: tcp
  DMSInstanceSubnetGroup:
    Type: AWS::DMS::ReplicationSubnetGroup
    DependsOn:
      - InitDMSRoles
    Properties:
      ReplicationSubnetGroupDescription: DMS Subnet Group
      SubnetIds:
        - Ref: RedshiftSubnetA
        - Ref: RedshiftSubnetB
  DMSInstance:
    Type: AWS::DMS::ReplicationInstance
    Properties:
      AllocatedStorage: 100
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: false
      MultiAZ: false
      PubliclyAccessible: true
      ReplicationInstanceClass: 'dms.c4.xlarge'
      ReplicationSubnetGroupIdentifier: !Ref DMSInstanceSubnetGroup
      VpcSecurityGroupIds:
        - Ref: RedshiftSecurityGroup
Outputs:
  EC2Hostname:
    Description: Public DNS endpoint for the EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PublicDnsName
